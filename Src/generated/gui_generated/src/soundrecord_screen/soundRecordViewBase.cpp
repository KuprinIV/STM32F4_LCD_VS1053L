/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/soundrecord_screen/soundRecordViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

soundRecordViewBase::soundRecordViewBase() :
    buttonCallback(this, &soundRecordViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &soundRecordViewBase::flexButtonCallbackHandler),
    sliderValueChangedCallback(this, &soundRecordViewBase::sliderValueChangedCallbackHandler),
    radioButtonSelectedCallback(this, &soundRecordViewBase::radioButtonSelectedCallbackHandler),
    micGainPickerPickerValueChangedCallback(this, &soundRecordViewBase::micGainPickerPickerValueChangedCallbackHandler),
    samplingFreqPickerPickerValueChangedCallback(this, &soundRecordViewBase::samplingFreqPickerPickerValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 272, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 272, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 255));

    box2.setPosition(0, 300, 272, 38);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 255, 255));

    micRadioButton.setXY(48, 47);
    micRadioButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_INACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_NORMAL_ID));
    micRadioButton.setSelected(true);
    micRadioButton.setDeselectionEnabled(false);

    textArea1.setXY(70, 9);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R9QM));

    textArea2.setXY(92, 57);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TV2F));

    lineRadioButton.setXY(147, 47);
    lineRadioButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_INACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_RADIO_BUTTONS_RADIO_ROUND_BUTTON_NORMAL_ID));
    lineRadioButton.setSelected(false);
    lineRadioButton.setDeselectionEnabled(false);

    textArea3.setXY(191, 57);
    textArea3.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea3.setLinespacing(0);
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MLSJ));

    backButton.setXY(56, 405);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    backButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_ZBZS));
    backButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setAction(buttonCallback);

    stopRecordButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    stopRecordButton.setBitmapXY(0, 0);
    stopRecordButton.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_STOP_32_ID), Bitmap(BITMAP_DARK_ICONS_STOP_32_ID));
    stopRecordButton.setIconXY(14, 14);
    stopRecordButton.setPosition(157, 338, 61, 60);
    stopRecordButton.setAction(flexButtonCallback);

    recordCtrlButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    recordCtrlButton.setBitmapXY(0, 0);
    recordCtrlButton.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
    recordCtrlButton.setIconXY(19, 14);
    recordCtrlButton.setPosition(56, 338, 60, 60);
    recordCtrlButton.setAction(flexButtonCallback);

    recordStatusText.setXY(90, 307);
    recordStatusText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    recordStatusText.setLinespacing(0);
    recordStatusTextBuffer[0] = 0;
    recordStatusText.setWildcard(recordStatusTextBuffer);
    recordStatusText.resizeToCurrentText();
    recordStatusText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BNDT));

    monitoringVolumeSlider.setXY(52, 128);
    monitoringVolumeSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    monitoringVolumeSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
    monitoringVolumeSlider.setValueRange(0, 168);
    monitoringVolumeSlider.setValue(84);
    monitoringVolumeSlider.setNewValueCallback(sliderValueChangedCallback);

    textArea4.setXY(48, 97);
    textArea4.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea4.setLinespacing(0);
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZRB0));

    textArea5.setXY(100, 170);
    textArea5.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea5.setLinespacing(0);
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FX34));

    micGainPicker.setXY(73, 195);
    micGainPicker.setPickerValueChangedCallback(micGainPickerPickerValueChangedCallback);

    textArea6.setXY(41, 240);
    textArea6.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea6.setLinespacing(0);
    textArea6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PGXB));

    samplingFreqPicker.setXY(73, 265);
    samplingFreqPicker.setPickerValueChangedCallback(samplingFreqPickerPickerValueChangedCallback);

    add(__background);
    add(box1);
    add(box2);
    add(micRadioButton);
    add(textArea1);
    add(textArea2);
    add(lineRadioButton);
    add(textArea3);
    add(backButton);
    add(stopRecordButton);
    add(recordCtrlButton);
    add(recordStatusText);
    add(monitoringVolumeSlider);
    add(textArea4);
    add(textArea5);
    add(micGainPicker);
    add(textArea6);
    add(samplingFreqPicker);
    radioButtonGroup1.add(micRadioButton);
    radioButtonGroup1.add(lineRadioButton);
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
}

void soundRecordViewBase::setupScreen()
{
    micGainPicker.initialize();
    samplingFreqPicker.initialize();
}

void soundRecordViewBase::micGainPickerPickerValueChangedCallbackHandler(uint8_t value)
{
    //micGainPickerValueChangedAction
    //When micGainPicker pickerValueChanged call virtual function
    //Call micGainPickerValueChanged
    micGainPickerValueChanged(value);
}

void soundRecordViewBase::samplingFreqPickerPickerValueChangedCallbackHandler(uint8_t value)
{
    //sampleFreqGainPickerValueChangedAction
    //When samplingFreqPicker pickerValueChanged call virtual function
    //Call sampleFreqGainPickerValueChanged
    sampleFreqGainPickerValueChanged(value);
}

void soundRecordViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //backButtonPressedAction
        //When backButton clicked call virtual function
        //Call onBackButtonPressed
        onBackButtonPressed();
    }
}

void soundRecordViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &stopRecordButton)
    {
        //stopButtonPressedAction
        //When stopRecordButton clicked call virtual function
        //Call stopButtonPressed
        stopButtonPressed();
    }
    else if (&src == &recordCtrlButton)
    {
        //recordCtrlButtonPressedAction
        //When recordCtrlButton clicked call virtual function
        //Call recordCtrlButtonPressed
        recordCtrlButtonPressed();
    }
}

void soundRecordViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &monitoringVolumeSlider)
    {
        //monitoringSliderValueChangedAction
        //When monitoringVolumeSlider value changed call virtual function
        //Call monitoringSliderValueChanged
        monitoringSliderValueChanged(value);
    }
}

void soundRecordViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &micRadioButton)
    {
        //micRadioButtonSelectedAction
        //When micRadioButton selected call virtual function
        //Call micRadioButtonSelected
        micRadioButtonSelected();
    }
    else if (&src == &lineRadioButton)
    {
        //lineRadioButtonSelectedAction
        //When lineRadioButton selected call virtual function
        //Call lineRadioButtonSelected
        lineRadioButtonSelected();
    }
}
