/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/playaudiofile_screen/playAudioFileViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

playAudioFileViewBase::playAudioFileViewBase() :
    buttonCallback(this, &playAudioFileViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &playAudioFileViewBase::flexButtonCallbackHandler),
    sliderValueStartedChangeCallback(this, &playAudioFileViewBase::sliderValueStartedChangeCallbackHandler),
    sliderValueChangedCallback(this, &playAudioFileViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &playAudioFileViewBase::sliderValueConfirmedCallbackHandler)
{

    __background.setPosition(0, 0, 272, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 272, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 255));

    backButton.setXY(51, 405);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    backButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_OCR8));
    backButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setAction(buttonCallback);

    playControlButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    playControlButton.setBitmapXY(0, 0);
    playControlButton.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID), Bitmap(BITMAP_DARK_ICONS_PLAY_32_ID));
    playControlButton.setIconXY(20, 14);
    playControlButton.setPosition(106, 310, 60, 60);
    playControlButton.setAction(flexButtonCallback);

    nextButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    nextButton.setBitmapXY(0, 0);
    nextButton.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID), Bitmap(BITMAP_DARK_ICONS_GO_NEXT_32_ID));
    nextButton.setIconXY(14, 14);
    nextButton.setPosition(178, 310, 60, 60);
    nextButton.setAction(flexButtonCallback);

    prevButton.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
    prevButton.setBitmapXY(0, 0);
    prevButton.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID), Bitmap(BITMAP_DARK_ICONS_GO_BACK_32_ID));
    prevButton.setIconXY(14, 14);
    prevButton.setPosition(34, 310, 60, 60);
    prevButton.setAction(flexButtonCallback);

    flexButton1.setBoxWithBorderPosition(0, 0, 50, 50);
    flexButton1.setBorderSize(5);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButton1.setIconXY(0, 0);
    flexButton1.setPosition(188, 81, 50, 50);
    flexButton1.setVisible(false);

    fileName.setXY(81, 209);
    fileName.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    fileName.setLinespacing(0);
    fileNameBuffer[0] = 0;
    fileName.setWildcard(fileNameBuffer);
    fileName.resizeToCurrentText();
    fileName.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3PE2));

    volumeSlider.setXY(49, 87);
    volumeSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    volumeSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
    volumeSlider.setValueRange(170, 254);
    volumeSlider.setValue(240);
    volumeSlider.setNewValueCallback(sliderValueChangedCallback);

    textArea1.setXY(101, 56);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U57E));

    playingFileProgress.setXY(34, 251);
    playingFileProgress.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_BACKGROUND_ID), touchgfx::Bitmap(BITMAP_SLIDER_FILLED_ID), touchgfx::Bitmap(BITMAP_SLIDER_INDICATOR_ID));
    playingFileProgress.setupHorizontalSlider(3, 7, 1, 0, 183);
    playingFileProgress.setValueRange(0, 100);
    playingFileProgress.setValue(0);
    playingFileProgress.setStartValueCallback(sliderValueStartedChangeCallback);
    playingFileProgress.setStopValueCallback(sliderValueConfirmedCallback);

    playTimeContainer.setPosition(34, 275, 206, 28);

    playingTimeText.setXY(33, 279);
    playingTimeText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    playingTimeText.setLinespacing(0);
    Unicode::snprintf(playingTimeTextBuffer, PLAYINGTIMETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J9EA).getText());
    playingTimeText.setWildcard(playingTimeTextBuffer);
    playingTimeText.resizeToCurrentText();
    playingTimeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BA90));

    fileDurationText.setXY(204, 279);
    fileDurationText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    fileDurationText.setLinespacing(0);
    Unicode::snprintf(fileDurationTextBuffer, FILEDURATIONTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_F9PB).getText());
    fileDurationText.setWildcard(fileDurationTextBuffer);
    fileDurationText.resizeToCurrentText();
    fileDurationText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YX63));

    playingSettingsButton.setBoxWithBorderPosition(0, 0, 40, 40);
    playingSettingsButton.setBorderSize(0);
    playingSettingsButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 255, 255), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    playingSettingsButton.setIconBitmaps(Bitmap(BITMAP_DARK_ICONS_SETTINGS_32_ID), Bitmap(BITMAP_DARK_ICONS_SETTINGS_32_ID));
    playingSettingsButton.setIconXY(4, 4);
    playingSettingsButton.setPosition(208, 22, 40, 40);
    playingSettingsButton.setAction(flexButtonCallback);

    modalWindow.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    modalWindow.setShadeAlpha(150);
    modalWindow.hide();

    playerSettingsWnd.setXY(11, 40);
    playerSettingsWnd.setVisible(false);

    closeModalWindowButton.setBoxWithBorderPosition(0, 0, 93, 27);
    closeModalWindowButton.setBorderSize(1);
    closeModalWindowButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(192, 192, 192), touchgfx::Color::getColorFromRGB(85, 92, 102), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    closeModalWindowButton.setText(TypedText(T___SINGLEUSE_2U0V));
    closeModalWindowButton.setTextPosition(0, 3, 93, 27);
    closeModalWindowButton.setTextColors(touchgfx::Color::getColorFromRGB(10, 10, 10), touchgfx::Color::getColorFromRGB(10, 10, 10));
    closeModalWindowButton.setPosition(90, 390, 93, 27);
    closeModalWindowButton.setVisible(false);
    closeModalWindowButton.setAction(flexButtonCallback);

    add(__background);
    add(box1);
    add(backButton);
    add(playControlButton);
    add(nextButton);
    add(prevButton);
    add(flexButton1);
    add(fileName);
    add(volumeSlider);
    add(textArea1);
    add(playingFileProgress);
    add(playTimeContainer);
    add(playingTimeText);
    add(fileDurationText);
    add(playingSettingsButton);
    add(modalWindow);
    add(playerSettingsWnd);
    add(closeModalWindowButton);
}

void playAudioFileViewBase::setupScreen()
{
    playerSettingsWnd.initialize();
}

void playAudioFileViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //onBackButtonPressedAction
        //When backButton clicked call virtual function
        //Call onBackButtonPressed
        onBackButtonPressed();
    }
}

void playAudioFileViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &playControlButton)
    {
        //onPlayCtrlBtnPressedAction
        //When playControlButton clicked call virtual function
        //Call onPlayCtrlBtnPressed
        onPlayCtrlBtnPressed();
    }
    else if (&src == &nextButton)
    {
        //onNextButtonPressedAction
        //When nextButton clicked call virtual function
        //Call onNextButtonPressed
        onNextButtonPressed();
    }
    else if (&src == &prevButton)
    {
        //onPrevButtonPressedAction
        //When prevButton clicked call virtual function
        //Call onPrevButtonPressed
        onPrevButtonPressed();
    }
    else if (&src == &playingSettingsButton)
    {
        //playSettingButtonPressedAction
        //When playingSettingsButton clicked call virtual function
        //Call playSettingButtonPressed
        playSettingButtonPressed();
    }
    else if (&src == &closeModalWindowButton)
    {
        //closeModalWindowButtonPressedAction
        //When closeModalWindowButton clicked call virtual function
        //Call closeModalWindowButtonPressed
        closeModalWindowButtonPressed();
    }
}

void playAudioFileViewBase::sliderValueStartedChangeCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &playingFileProgress)
    {
        //onFileProgressChangeInitedAction
        //When playingFileProgress slider adjustment initiated call virtual function
        //Call onFileProgressChangeInited
        onFileProgressChangeInited(value);
    }
}

void playAudioFileViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &volumeSlider)
    {
        //volumeSliderValueChangedAction
        //When volumeSlider value changed call virtual function
        //Call volumeSliderValueChanged
        volumeSliderValueChanged(value);
    }
}

void playAudioFileViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &playingFileProgress)
    {
        //onFileProgressValueChangedAction
        //When playingFileProgress value confirmed call virtual function
        //Call onFileProgressValueChanged
        onFileProgressValueChanged(value);
    }
}
