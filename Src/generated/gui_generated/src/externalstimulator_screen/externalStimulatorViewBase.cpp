/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/externalstimulator_screen/externalStimulatorViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <BitmapDatabase.hpp>

externalStimulatorViewBase::externalStimulatorViewBase() :
    buttonCallback(this, &externalStimulatorViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &externalStimulatorViewBase::sliderValueChangedCallbackHandler),
    stimTypePickerPickerValueChangedCallback(this, &externalStimulatorViewBase::stimTypePickerPickerValueChangedCallbackHandler)
{

    __background.setPosition(0, 0, 272, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box1.setPosition(0, 0, 272, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 255));

    textArea1.setXY(76, 20);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S203));

    maxVolumeSlider.setXY(47, 52);
    maxVolumeSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_EDGE_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    maxVolumeSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
    maxVolumeSlider.setValueRange(127, 254);
    maxVolumeSlider.setValue(192);
    maxVolumeSlider.setNewValueCallback(sliderValueChangedCallback);

    backButton.setXY(56, 405);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    backButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_A23Y));
    backButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backButton.setAction(buttonCallback);

    testCtrlButton.setXY(56, 345);
    testCtrlButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    testCtrlButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_IKAT));
    testCtrlButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    testCtrlButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    testCtrlButton.setAction(buttonCallback);

    testProgressBar.setXY(44, 136);
    testProgressBar.setProgressIndicatorPosition(2, 2, 180, 16);
    testProgressBar.setRange(0, 5);
    testProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    testProgressBar.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
    testProgressBar.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    testProgressBar.setValue(0);

    box2.setPosition(0, 163, 272, 25);
    box2.setColor(touchgfx::Color::getColorFromRGB(0, 255, 255));

    testProgressText.setXY(90, 163);
    testProgressText.setVisible(false);
    testProgressText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    testProgressText.setLinespacing(0);
    testProgressTextBuffer[0] = 0;
    testProgressText.setWildcard(testProgressTextBuffer);
    testProgressText.resizeToCurrentText();
    testProgressText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FAA6));

    stimTypePicker.setXY(71, 233);
    stimTypePicker.setPickerValueChangedCallback(stimTypePickerPickerValueChangedCallback);

    textArea2.setXY(67, 200);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z6QO));

    add(__background);
    add(box1);
    add(textArea1);
    add(maxVolumeSlider);
    add(backButton);
    add(testCtrlButton);
    add(testProgressBar);
    add(box2);
    add(testProgressText);
    add(stimTypePicker);
    add(textArea2);
}

void externalStimulatorViewBase::setupScreen()
{
    stimTypePicker.initialize();
}

void externalStimulatorViewBase::stimTypePickerPickerValueChangedCallbackHandler(uint8_t value)
{
    //stimTypePickerValueChangedAction
    //When stimTypePicker pickerValueChanged call virtual function
    //Call stimTypePickerValueChanged
    stimTypePickerValueChanged(value);
}

void externalStimulatorViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &backButton)
    {
        //backButtonPressedAction
        //When backButton clicked call virtual function
        //Call backButtonPressed
        backButtonPressed();
    }
    else if (&src == &testCtrlButton)
    {
        //testCtrlButtonPressedAction
        //When testCtrlButton clicked call virtual function
        //Call testCtrlButtonPressed
        testCtrlButtonPressed();
    }
}

void externalStimulatorViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &maxVolumeSlider)
    {
        //maxVolumeSliderValueChangedAction
        //When maxVolumeSlider value changed call virtual function
        //Call maxVolumeSliderValueChanged
        maxVolumeSliderValueChanged(value);
    }
}
