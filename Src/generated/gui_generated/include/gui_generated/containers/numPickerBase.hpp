/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef NUMPICKERBASE_HPP
#define NUMPICKERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class numPickerBase : public touchgfx::Container
{
public:
    numPickerBase();
    virtual ~numPickerBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setPickerValueChangedCallback(touchgfx::GenericCallback<uint8_t>& callback)
    {
        this->pickerValueChangedCallback = &callback;
    }

    /*
     * Virtual Action Handlers
     */
    virtual void goPrevValueButtonPressed()
    {
        // Override and implement this function in numPicker
    }

    virtual void goNextValueButtonPressed()
    {
        // Override and implement this function in numPicker
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitPickerValueChangedCallback(uint8_t value)
    {
        if (pickerValueChangedCallback && pickerValueChangedCallback->isValid())
        {
            this->pickerValueChangedCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::TextAreaWithOneWildcard pickerText;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger > > goPrevValueButton;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger > > goNextValueButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PICKERTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar pickerTextBuffer[PICKERTEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<numPickerBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<uint8_t>* pickerValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // NUMPICKERBASE_HPP
