/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef PLAYERSETTINGSBASE_HPP
#define PLAYERSETTINGSBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class playerSettingsBase : public touchgfx::Container
{
public:
    playerSettingsBase();
    virtual ~playerSettingsBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setPlaySettingsChangedCallback(touchgfx::GenericCallback<uint16_t*>& callback)
    {
        this->playSettingsChangedCallback = &callback;
    }

    /*
     * Virtual Action Handlers
     */
    virtual void diffRadioButtonSelected()
    {
        // Override and implement this function in playerSettings
    }

    virtual void bassAmpSliderValueChanged(int value)
    {
        // Override and implement this function in playerSettings
    }

    virtual void bassFreqSliderValueChanged(int value)
    {
        // Override and implement this function in playerSettings
    }

    virtual void trebleAmpSliderValueChanged(int value)
    {
        // Override and implement this function in playerSettings
    }

    virtual void trebleFreqSliderValueChanged(int value)
    {
        // Override and implement this function in playerSettings
    }

    virtual void diffRadioButtonDeselected()
    {
        // Override and implement this function in playerSettings
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitPlaySettingsChangedCallback(uint16_t* value)
    {
        if (playSettingsChangedCallback && playSettingsChangedCallback->isValid())
        {
            this->playSettingsChangedCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::TextArea textArea1;
    touchgfx::RadioButton diffRadioButton;
    touchgfx::TextArea textArea2;
    touchgfx::Slider bassAmpSlider;
    touchgfx::TextAreaWithOneWildcard bassBoostText;
    touchgfx::Slider bassFreqSlider;
    touchgfx::TextAreaWithOneWildcard bassFreqText;
    touchgfx::TextArea textArea3;
    touchgfx::Slider trebleAmpSlider;
    touchgfx::TextAreaWithOneWildcard trebleBoostText;
    touchgfx::Slider trebleFreqSlider;
    touchgfx::TextAreaWithOneWildcard trebleFreqText;
    touchgfx::RadioButtonGroup<1> radioButtonGroup1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t BASSBOOSTTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar bassBoostTextBuffer[BASSBOOSTTEXT_SIZE];
    static const uint16_t BASSFREQTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar bassFreqTextBuffer[BASSFREQTEXT_SIZE];
    static const uint16_t TREBLEBOOSTTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar trebleBoostTextBuffer[TREBLEBOOSTTEXT_SIZE];
    static const uint16_t TREBLEFREQTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar trebleFreqTextBuffer[TREBLEFREQTEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<playerSettingsBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<playerSettingsBase, const touchgfx::AbstractButton&> radioButtonSelectedCallback;
    touchgfx::Callback<playerSettingsBase, const touchgfx::AbstractButton&> radioButtonDeselectedCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<uint16_t*>* playSettingsChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src);
    void radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // PLAYERSETTINGSBASE_HPP
