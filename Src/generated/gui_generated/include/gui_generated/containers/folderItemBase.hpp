/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FOLDERITEMBASE_HPP
#define FOLDERITEMBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class folderItemBase : public touchgfx::Container
{
public:
    folderItemBase();
    virtual ~folderItemBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setOnFolderItemClickedCallback(touchgfx::GenericCallback<const touchgfx::Unicode::UnicodeChar*>& callback)
    {
        this->onFolderItemClickedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitOnFolderItemClickedCallback(const touchgfx::Unicode::UnicodeChar* value)
    {
        if (onFolderItemClickedCallback && onFolderItemClickedCallback->isValid())
        {
            this->onFolderItemClickedCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger > itemDirButton;
    touchgfx::Image image1;
    touchgfx::TextAreaWithOneWildcard folderName;

    /*
     * Wildcard Buffers
     */
    static const uint16_t FOLDERNAME_SIZE = 256;
    touchgfx::Unicode::UnicodeChar folderNameBuffer[FOLDERNAME_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<folderItemBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<const touchgfx::Unicode::UnicodeChar*>* onFolderItemClickedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // FOLDERITEMBASE_HPP
