/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAIN_SCREENVIEWBASE_HPP
#define MAIN_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen_screen/main_screenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class main_screenViewBase : public touchgfx::View<main_screenPresenter>
{
public:
    main_screenViewBase();
    virtual ~main_screenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void goToSDFileViewerScreen()
    {
        // Override and implement this function in main_screen
    }

    virtual void backlightSB_valueChanged(int value)
    {
        // Override and implement this function in main_screen
    }

    virtual void goToSoundRecordScreen()
    {
        // Override and implement this function in main_screen
    }

    virtual void closeModalWindow()
    {
        // Override and implement this function in main_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box backgroundBox;
    touchgfx::ButtonWithLabel testFatFSBtn;
    touchgfx::ButtonWithLabel codecTestBtn;
    touchgfx::Slider backlightSB;
    touchgfx::TextAreaWithOneWildcard textArea2;
    touchgfx::ButtonWithLabel soundRecordBtn;
    touchgfx::ButtonWithLabel startScopeButton;
    touchgfx::ButtonWithLabel externalStimButton;
    touchgfx::Image sdCardIcon;
    touchgfx::ModalWindow modalWindow;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger > > closeModalWndButton;
    touchgfx::TextAreaWithOneWildcard modalWindowMessageText;
    touchgfx::Image usbIcon;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea2Buffer[TEXTAREA2_SIZE];
    static const uint16_t MODALWINDOWMESSAGETEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar modalWindowMessageTextBuffer[MODALWINDOWMESSAGETEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<main_screenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<main_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<main_screenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // MAIN_SCREENVIEWBASE_HPP
